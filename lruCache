class LRUCache {
  cache: Map<any, any>
  capacity: number
  constructor (capacity:number) {
    this.capacity = capacity
    this.cache = new Map()
  }

  get(key:number):any {
     let returnValue = -1
     if (this.cache.has(key)) {
       // If the cache key, we need to return it and make sure it the mostly used item
      returnValue = this.cache.get(key) 
      this.cache.delete(key)
      this.cache.set(key, returnValue)
     } 
     return returnValue
  }

  set(key:number,val:any):void {
    if (this.get(key) === -1) {
      //Key doesn't exists so we need to add it as a most used item
      //Now check whether the capacity is full
      if (this.capacity === this.cache.size) {
        // We need to replace the existing one so remove the one
        // Delete the first one
        for (let keyVal of this.cache) {
          this.cache.delete(keyVal[0])
          break;
        }
      }
      this.cache.set(key, val)
      
    }
  }
}


const LRU = new LRUCache(2)

LRU.set(1,1)
LRU.set(2,2)
console.log(LRU.get(1))
LRU.set(3,3)
console.log(LRU.get(2))
LRU.set(4,4)
console.log(LRU.get(1))
console.log(LRU.get(3))
console.log(LRU.get(4))





